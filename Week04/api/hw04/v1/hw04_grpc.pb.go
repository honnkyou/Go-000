// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// HomeworkClient is the client API for Homework service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HomeworkClient interface {
	TakeHomework(ctx context.Context, in *HWRequest, opts ...grpc.CallOption) (*HWReply, error)
}

type homeworkClient struct {
	cc grpc.ClientConnInterface
}

func NewHomeworkClient(cc grpc.ClientConnInterface) HomeworkClient {
	return &homeworkClient{cc}
}

func (c *homeworkClient) TakeHomework(ctx context.Context, in *HWRequest, opts ...grpc.CallOption) (*HWReply, error) {
	out := new(HWReply)
	err := c.cc.Invoke(ctx, "/hw04.Homework/TakeHomework", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HomeworkServer is the server API for Homework service.
// All implementations must embed UnimplementedHomeworkServer
// for forward compatibility
type HomeworkServer interface {
	TakeHomework(context.Context, *HWRequest) (*HWReply, error)
	mustEmbedUnimplementedHomeworkServer()
}

// UnimplementedHomeworkServer must be embedded to have forward compatible implementations.
type UnimplementedHomeworkServer struct {
}

func (UnimplementedHomeworkServer) TakeHomework(context.Context, *HWRequest) (*HWReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeHomework not implemented")
}
func (UnimplementedHomeworkServer) mustEmbedUnimplementedHomeworkServer() {}

// UnsafeHomeworkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HomeworkServer will
// result in compilation errors.
type UnsafeHomeworkServer interface {
	mustEmbedUnimplementedHomeworkServer()
}

func RegisterHomeworkServer(s grpc.ServiceRegistrar, srv HomeworkServer) {
	s.RegisterService(&_Homework_serviceDesc, srv)
}

func _Homework_TakeHomework_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HWRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeworkServer).TakeHomework(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hw04.Homework/TakeHomework",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeworkServer).TakeHomework(ctx, req.(*HWRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Homework_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hw04.Homework",
	HandlerType: (*HomeworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TakeHomework",
			Handler:    _Homework_TakeHomework_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hw04.proto",
}
